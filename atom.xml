<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yqzzxlj</title>
  
  <subtitle>hello world</subtitle>
  <link href="http://yoursite.com/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-01-02T04:35:05.585Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Yqzzxlj</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>多线程编程</title>
    <link href="http://yoursite.com/2021/01/02/C++/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2021/01/02/C++/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</id>
    <published>2021-01-02T04:28:12.000Z</published>
    <updated>2021-01-02T04:35:05.585Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多线程编程"><a href="#多线程编程" class="headerlink" title="多线程编程"></a>多线程编程</h1><h2 id="1-线程的启动、结束"><a href="#1-线程的启动、结束" class="headerlink" title="1. 线程的启动、结束"></a>1. 线程的启动、结束</h2><h3 id="1-1-线程运行的开始和结束"><a href="#1-1-线程运行的开始和结束" class="headerlink" title="1.1 线程运行的开始和结束"></a>1.1 线程运行的开始和结束</h3><ul><li>程序运行起来，生成一个进程，该进程所属的主线程开始自动运行；当主线程从main（）函数返回，则整个进程执行完毕</li><li>主线程从main（）开始执行，那么我们自己创建的线程，也需要从一个函数开始运行（初始函数），一旦这个函数运行完毕，线程也结束运行</li><li>整个进程是否执行完毕的标志是：主线程是否执行完，如果主线程执行完毕了，就代表整个进程执行完毕了，此时如果其他子线程还没有执行完，也会被强行终止【此条有例外，以后会解释】</li></ul><h3 id="1-2-创建一个线程"><a href="#1-2-创建一个线程" class="headerlink" title="1.2 创建一个线程"></a>1.2 创建一个线程</h3><ol><li>包含头文件thread</li><li>写初始函数</li><li>在main中创建thread</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;my thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1. 创建线程，线程执行入口是func；2. 执行线程</span></span><br><span class="line">  <span class="function">thread <span class="title">mytobj</span><span class="params">(func)</span></span>;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 阻塞主线程兵等待mytobj执行完。之后主线程继续向下执行</span></span><br><span class="line">  <span class="comment">// join意为加入，汇合，子线程与主线程在此处汇合。</span></span><br><span class="line">  mytobj.join();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// mytobj.detach();</span></span><br><span class="line">  <span class="comment">// 分离，主线程不在与子线程汇合，不再等待子线程。分离后，子线程和主线程失去关联，驻留在后台，由C++运行时库接管。（守护线程）</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// joinable()判断是否可以使用join()或者detach()</span></span><br><span class="line">  <span class="keyword">if</span>(mytobj.joinable()) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;可以调用join()或者detach()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;不能调用join()或者detach()&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>线程类参数是一个可调用对象。</strong></p></li><li><p>一组可执行的语句称为可调用对象，c++中的可调用对象可以是函数、函数指针、lambda表达式、bind创建的对象或者重载了函数调用运算符的类对象。</p></li><li><p>主线程执行完毕后，局部变量被销毁，内存被回收，如果子线程detach后，仍在引用或指向其中的变量，则会发生不可预知的错误。</p></li><li><p>bind绑定： <a href="https://www.cnblogs.com/jialin0x7c9/p/12219239.html">https://www.cnblogs.com/jialin0x7c9/p/12219239.html</a></p></li></ul><h3 id="1-3-其他创建线程的方法"><a href="#1-3-其他创建线程的方法" class="headerlink" title="1.3 其他创建线程的方法"></a>1.3 其他创建线程的方法</h3><ol><li><p>仿函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">operator</span><span class="params">()</span><span class="params">()</span> </span>&#123;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;my thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  A a;</span><br><span class="line">  <span class="function">thread <span class="title">mytobj</span><span class="params">(a)</span></span>;</span><br><span class="line">  mytobj.join();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>lambda表达式</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">auto</span> a = []() &#123;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;my thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="function">thread <span class="title">mytobj</span><span class="params">(a)</span></span>;</span><br><span class="line">  mytobj.join();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>成员函数做线程函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    A(<span class="keyword">int</span> _i) : i(_i) &#123;&#125;</span><br><span class="line">    A(<span class="keyword">const</span> A&amp; a) &#123;<span class="keyword">this</span>-&gt;i = a.i;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">thread_work</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;my thread. num : &quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;i: &quot;</span> &lt;&lt; <span class="keyword">this</span>-&gt;i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function">A <span class="title">a</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 生成类对象</span></span><br><span class="line"></span><br><span class="line">  <span class="function">thread <span class="title">mytobj</span><span class="params">(&amp;A::thread_work, a, <span class="number">15</span>)</span></span>; <span class="comment">// 拷贝a到子进程</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">// thread mytobj(&amp;A::thread_work, ref(a), 15); 引用a到子进程</span></span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">  mytobj.join();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h3 id="1-4-创建和等待多个线程"><a href="#1-4-创建和等待多个线程" class="headerlink" title="1.4 创建和等待多个线程"></a>1.4 创建和等待多个线程</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;mythread &quot;</span> &lt;&lt; num &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">vector</span>&lt;thread&gt; mythreads;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; ++i) &#123;</span><br><span class="line">    mythreads.push_back(thread(func, i));</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> it = mythreads.begin(); it != mythreads.end(); ++it) &#123;</span><br><span class="line">    it-&gt;join();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>把thread对象放入到容器中管理，看起来像个thread对象数组，对一次创建大量的线程并对大量线程进行管理有好处</li><li>多个线程执行顺序是乱的，跟操作系统内部对线程的运行调度机制有关</li></ul><h2 id="2-线程传参"><a href="#2-线程传参" class="headerlink" title="2 线程传参"></a>2 线程传参</h2><h3 id="2-1-传递临时对象做线程参数"><a href="#2-1-传递临时对象做线程参数" class="headerlink" title="2.1 传递临时对象做线程参数"></a>2.1 传递临时对象做线程参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">char</span>* pmybuff)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; i &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; pmybuff &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">int</span> var = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">char</span> mybuff[] = <span class="string">&quot;This is my test!&quot;</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">thread <span class="title">mytobj</span><span class="params">(func, var, mybuff)</span></span>; <span class="comment">// 如果是detach，可能会出现mybuff已经释放，但是子进程还在用。如果func参数类型是string，则有可能在隐式转换前释放的可能。</span></span><br><span class="line">  mytobj.join();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>传引用用std::ref(), 否则线程会值传递。</li><li>detach时，指针会有问题。（指向的内存是一个）。</li><li>const 引用，可以接收右值</li></ul><h3 id="2-2-线程id"><a href="#2-2-线程id" class="headerlink" title="2.2 线程id"></a>2.2 线程id</h3><ul><li>id是个数字，每个线程（不管是主线程还是子线程）实际上都对应着一个数字，而且每个线程对应的这个数字都不一样</li><li>线程id可以用C++标准库里的函数来获取。std::this_thread::get_id()来获取</li></ul><h3 id="2-3-总结"><a href="#2-3-总结" class="headerlink" title="2.3 总结"></a>2.3 总结</h3><ul><li>如果传递int这种简单类型，推荐使用值传递，不要用引用</li><li>如果传递类对象，避免使用隐式类型转换，全部都是创建线程这一行就创建出临时对象，然后在函数参数里，用引用来接，否则还会创建出一个对象</li><li>不建议使用detach。</li></ul><h3 id="2-4-传递类对象作为线程参数"><a href="#2-4-传递类对象作为线程参数" class="headerlink" title="2.4 传递类对象作为线程参数"></a>2.4 传递类对象作为线程参数</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;thread&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; pmn)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; *pmn &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="built_in">unique_ptr</span>&lt;<span class="keyword">int</span>&gt; <span class="title">myp</span><span class="params">(<span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">100</span>))</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="function">thread <span class="title">mytobj</span><span class="params">(func, move(myp))</span></span>; <span class="comment">// 将指针控制权交给子进程。detach可能会出错，内存泄漏</span></span><br><span class="line"></span><br><span class="line">  mytobj.join();</span><br><span class="line"></span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; (myp == <span class="literal">nullptr</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;main thread.&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-互斥量"><a href="#3-互斥量" class="headerlink" title="3 互斥量"></a>3 互斥量</h2><h3 id="3-1-互斥量的用法"><a href="#3-1-互斥量的用法" class="headerlink" title="3.1 互斥量的用法"></a>3.1 互斥量的用法</h3><h4 id="3-1-1-incldue"><a href="#3-1-1-incldue" class="headerlink" title="3.1.1 #incldue "></a>3.1.1 #incldue <mutex></h4><h4 id="3-1-2-lock-unlock"><a href="#3-1-2-lock-unlock" class="headerlink" title="3.1.2 lock(), unlock()"></a>3.1.2 lock(), unlock()</h4><ul><li>lock(), 操作共享数据， unlock()</li><li>lock() 和 unlock() 成对使用。</li></ul><h3 id="3-1-3-lock-guard类模版"><a href="#3-1-3-lock-guard类模版" class="headerlink" title="3.1.3 lock_guard类模版"></a>3.1.3 lock_guard类模版</h3><ul><li>lock_guard<mutex> sbguard(myMutex); 取代lock() 和unlock()</li><li>lock_guard 构造函数执行了mutex::lock(), 在作用域结束时，调用析构函数，执行mutex::unlock()</li></ul><h3 id="3-2-死锁"><a href="#3-2-死锁" class="headerlink" title="3.2 死锁"></a>3.2 死锁</h3><p>只要保证多个互斥量上锁的顺序一样就不会造成死锁。</p><h4 id="3-2-1-std-lock-函数模板"><a href="#3-2-1-std-lock-函数模板" class="headerlink" title="3.2.1 std::lock()函数模板"></a>3.2.1 std::lock()函数模板</h4><ul><li>std::lock(mutex1, mutex2, …); 一次锁定多个互斥量，用于处理多个互斥量。</li><li>如果互斥量中有一个没锁住，他就会等待至所有互斥量都锁住才继续执行。如果一个没锁住就会把已经锁住的释放掉（要么都锁住，要么都没锁，防止死锁）</li></ul><h4 id="3-2-2-std-lock-guard-的std-adapt-lock参数"><a href="#3-2-2-std-lock-guard-的std-adapt-lock参数" class="headerlink" title="3.2.2 std::lock_guard()的std::adapt_lock参数"></a>3.2.2 std::lock_guard()的std::adapt_lock参数</h4><ul><li><pre><code>std::lock_guard&lt;std::mutex&gt; my_guard(my_mutex, std::adopt_lock);//加入adopt_lock后，在调用lock_guard的构造函数时，不会在进行lock()<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">+ adopt_guard为结构体对象，起一个标记作用，表示这个互斥量已经lock()，不需要在lock()</span><br><span class="line"></span><br><span class="line">## 4 unique_lock</span><br><span class="line"></span><br><span class="line">### 4.1 unique_lock取代lock_guard</span><br><span class="line"></span><br><span class="line">unique_lock比lock_guard灵活很多（多出来很多用法），效率差一点</span><br><span class="line"></span><br><span class="line">&#96;&#96;&#96;c++</span><br><span class="line">unique_lock&lt;mutex&gt; myUniLock(myMutex);</span><br></pre></td></tr></table></figure></code></pre></li></ul><h3 id="4-2-unique-lock的第二个参数"><a href="#4-2-unique-lock的第二个参数" class="headerlink" title="4.2 unique_lock的第二个参数"></a>4.2 unique_lock的第二个参数</h3><h4 id="4-2-1-std-adopt-lock"><a href="#4-2-1-std-adopt-lock" class="headerlink" title="4.2.1 std::adopt_lock:"></a>4.2.1 std::adopt_lock:</h4><ul><li>表示这个互斥量已经被lock(),即不需要在构造函数中lock这个互斥量了。</li><li>前提：必须提前lock</li><li>lock_guard中也可以用这个参数</li></ul><h4 id="4-2-2-std-try-to-lock"><a href="#4-2-2-std-try-to-lock" class="headerlink" title="4.2.2 std::try_to_lock:"></a>4.2.2 std::try_to_lock:</h4><ul><li>尝试用mutex的lock()去锁定这个mutex，如果没有锁定成功，立即返回，不会阻塞</li><li>使用try_to_lock的原因是防止其他的线程锁定mutex太长时间，导致本线程一直阻塞在lock这个地方</li><li>前提：不能提前lock();</li><li>owns_locks()方法判断是否拿到锁，如拿到返回true</li></ul><h4 id="4-2-3-std-defer-lock"><a href="#4-2-3-std-defer-lock" class="headerlink" title="4.2.3 std::defer_lock:"></a>4.2.3 std::defer_lock:</h4><ul><li>如果没有第二个参数就对mutex进行加锁，加上defer_lock是始化了一个没有加锁的mutex</li><li>不给它加锁的目的是以后可以调用unique_lock的一些方法</li><li>前提：不能提前lock</li></ul><h3 id="4-3-unique-lock的成员函数（前三个与std-defer-lock联合使用）"><a href="#4-3-unique-lock的成员函数（前三个与std-defer-lock联合使用）" class="headerlink" title="4.3 unique_lock的成员函数（前三个与std::defer_lock联合使用）"></a>4.3 unique_lock的成员函数（前三个与std::defer_lock联合使用）</h3><h4 id="4-3-1-lock-加锁"><a href="#4-3-1-lock-加锁" class="headerlink" title="4.3.1 lock() 加锁"></a>4.3.1 lock() 加锁</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unique_lock&lt;mutex&gt; myUniLock(myMutex， defer_lock);</span><br><span class="line">myUniLock.lock();</span><br></pre></td></tr></table></figure><p>不用自己unlock()</p><h4 id="4-3-2-unlock-解锁"><a href="#4-3-2-unlock-解锁" class="headerlink" title="4.3.2 unlock() 解锁"></a>4.3.2 unlock() 解锁</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">myUniLock</span><span class="params">(myMutex， defer_lock)</span></span>;</span><br><span class="line">myUniLock.lock();</span><br><span class="line"><span class="comment">//处理一些共享代码</span></span><br><span class="line">myUniLock.unlock();</span><br><span class="line"><span class="comment">//处理一些非共享代码</span></span><br><span class="line">myUniLock.lock();</span><br><span class="line"><span class="comment">//处理一些共享代码</span></span><br></pre></td></tr></table></figure><p>因为一些非共享代码要处理，可以暂时先unlock()，用其他线程把它们处理了，处理完后再lock()。</p><h4 id="4-3-3-try-lock-尝试给互斥量加锁"><a href="#4-3-3-try-lock-尝试给互斥量加锁" class="headerlink" title="4.3.3 try_lock() : 尝试给互斥量加锁"></a>4.3.3 try_lock() : 尝试给互斥量加锁</h4><p>如果拿不到锁，返回false，否则返回true。</p><h4 id="4-3-4-release"><a href="#4-3-4-release" class="headerlink" title="4.3.4 release():"></a>4.3.4 release():</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_lock&lt;mutex&gt; <span class="title">myUniLock</span><span class="params">(myMutex)</span></span>;</span><br></pre></td></tr></table></figure><p>相当于把myMutex和myUniLock绑定在了一起，release()就是解除绑定，返回他所管理的mutex对象的指针，并释放所有权。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mutex* ptx = myUniLock.release();</span><br></pre></td></tr></table></figure><p>所有权由ptx接管，如果原来mutex对象处理加锁状态，就需要ptx在以后进行解锁了</p><p>lock的代码段越少，执行越快，整个程序的运行效率越高。</p><ol><li>锁住的代码少，叫做粒度细，执行效率高；</li><li>锁住的代码多，叫做粒度粗，执行效率低；</li></ol><h3 id="4-4-unique-lock所有权的传递"><a href="#4-4-unique-lock所有权的传递" class="headerlink" title="4.4 unique_lock所有权的传递"></a>4.4 unique_lock所有权的传递</h3><ol><li><p>使用move转移</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">unique_lock <span class="title">myUniLock2</span><span class="params">(<span class="built_in">std</span>::move(myUniLock))</span></span>;</span><br></pre></td></tr></table></figure></li><li><p>在函数中return一个临时变量，即可实现转移</p></li><li><pre><code class="c++"><span class="function">unique_lock&lt;mutex&gt; <span class="title">aFunction</span><span class="params">()</span></span><span class="function"></span>&#123;    <span class="function">unique_lock&lt;mutex&gt; <span class="title">myUniLock</span><span class="params">(myMutex)</span></span>;    <span class="comment">//移动构造函数那里讲从函数返回一个局部的unique_lock对象是可以的</span>    <span class="comment">//返回这种局部对象会导致系统生成临时的unique_lock对象，并调用unique_lock的移动构造函数</span>    <span class="keyword">return</span> myUniLock;&#125;&lt;!--code￼<span class="number">13</span>--&gt;</code></pre></li></ol><h2 id="6-条件变量"><a href="#6-条件变量" class="headerlink" title="6 条件变量"></a>6 条件变量</h2><h3 id="6-1-condition-variable"><a href="#6-1-condition-variable" class="headerlink" title="6.1 condition_variable"></a>6.1 condition_variable</h3><ul><li><p>std::condition_variable实际上是一个类，是一个和条件相关的类，说白了就是等待一个条件达成。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::mutex mymutex1;</span><br><span class="line"><span class="function"><span class="built_in">std</span>::unique_lock&lt;<span class="built_in">std</span>::mutex&gt; <span class="title">sbguard1</span><span class="params">(mymutex1)</span></span>;</span><br><span class="line"><span class="built_in">std</span>::condition_variable condition;</span><br><span class="line">condition.wait(sbguard1, [<span class="keyword">this</span>] &#123;<span class="keyword">if</span> (!msgRecvQueue.empty())</span><br><span class="line">                                    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">                                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">                                &#125;);</span><br><span class="line"> </span><br><span class="line">condition.wait(sbguard1);</span><br></pre></td></tr></table></figure></li><li><p>wait()用来等一个东西</p><ul><li>如果第二个参数的lambda表达式返回值是false，那么wait()将<strong>解锁互斥量，并阻塞到本行</strong></li><li>如果第二个参数的lambda表达式返回值是true，那么wait()直接返回并继续执行。</li><li>阻塞到什么时候为止呢？阻塞到其他某个线程调用notify_one()成员函数为止</li><li>如果没有第二个参数，那么效果跟第二个参数lambda表达式返回false效果一样</li><li>wait()将解锁互斥量，并阻塞到本行，阻塞到其他某个线程调用notify_one()成员函数为止。</li><li>当其他线程用notify_one()将本线程wait()唤醒后，这个wait恢复后<ol><li>wait()不断尝试获取互斥量锁，如果获取不到那么流程就卡在wait()这里等待获取，如果获取到了，那么wait()就继续执行，获取到了锁</li><li>如果wait有第二个参数就判断这个lambda表达式。<ol><li>如果表达式为false，那wait又对互斥量解锁，然后又休眠，等待再次被notify_one()唤醒</li><li>如果lambda表达式为true，则wait返回，流程可以继续执行（此时互斥量已被锁住）。</li></ol></li><li>如果wait没有第二个参数，则wait返回，流程走下去。</li></ol></li><li>流程只要走到了wait()下面则互斥量一定被锁住了。</li></ul></li><li><p>notify_one()：通知一个线程的wait()</p></li><li><p>notify_all()：通知所有线程的wait()</p></li></ul><h3 id="6-2-虚假唤醒"><a href="#6-2-虚假唤醒" class="headerlink" title="6.2 虚假唤醒"></a>6.2 虚假唤醒</h3><p>notify_one或者notify_all唤醒wait()后，实际有些线程可能不满足唤醒的条件，就会造成虚假唤醒，可以在wait中再次进行判断解决虚假唤醒。<br>解决：wait中要有第二个参数（lambda），并且这个lambda中要正确判断所处理的公共数据是否存在</p><h2 id="7-std-atomic-原子操作"><a href="#7-std-atomic-原子操作" class="headerlink" title="7 std::atomic 原子操作"></a>7 std::atomic 原子操作</h2><h3 id="7-1-互斥"><a href="#7-1-互斥" class="headerlink" title="7.1 互斥"></a>7.1 互斥</h3><ul><li>互斥量：多线程编程中 用于保护共享数据：先锁住， 操作共享数据， 解锁。</li><li>有两个线程，对一个变量进行操作，一个线程读这个变量的值，一个线程往这个变量中写值。即使是一个简单变量的读取和写入操作，如果不加锁，也有可能会导致读写值混乱（一条C语句会被拆成3、4条汇编语句来执行，所以仍然有可能混乱）</li></ul><h3 id="7-2-std-atomic"><a href="#7-2-std-atomic" class="headerlink" title="7.2 std::atomic"></a>7.2 std::atomic</h3><ul><li>大家可以把原子操作理解成一种：不需要用到互斥量加锁（无锁）技术的多线程并发编程方式。</li><li>原子操作：在多线程中不会被打断的程序执行片段。</li><li>从效率上来说，原子操作要比互斥量的方式效率要高。</li><li>互斥量的加锁一般是针对一个代码段，而原子操作针对的一般都是一个变量。</li><li>原子操作，一般都是指“不可分割的操作”；也就是说这种操作状态要么是完成的，要么是没完成的，不可能出现半完成状态。</li><li>std::atomic来代表原子操作，是个类模板。其实std::atomic是用来封装某个类型的值的</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">atomic&lt;<span class="keyword">int</span>&gt; <span class="title">g_count</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mythread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</span><br><span class="line">    ++g_count;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">thread <span class="title">t1</span><span class="params">(mythread)</span></span>;</span><br><span class="line">  <span class="function">thread <span class="title">t2</span><span class="params">(mythread)</span></span>;</span><br><span class="line">  t1.join();</span><br><span class="line">  t2.join();</span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; g_count &lt;&lt; <span class="built_in">endl</span>; <span class="comment">// 20000</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>原子操作一般用于计数或者统计（如累计发送多少个数据包，累计接收到了多少个数据包），多个线程一起统计，这种情况如果不使用原子操作会导致统计发生混乱。</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">atomic&lt;<span class="keyword">int</span>&gt; <span class="title">g_count</span><span class="params">(<span class="number">0</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mythread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; ++i) &#123;</span><br><span class="line">    g_count = g_count + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">thread <span class="title">t1</span><span class="params">(mythread)</span></span>;</span><br><span class="line">  <span class="function">thread <span class="title">t2</span><span class="params">(mythread)</span></span>;</span><br><span class="line">  t1.join();</span><br><span class="line">  t2.join(); </span><br><span class="line">  <span class="built_in">cout</span> &lt;&lt; g_count &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一般atomic原子操作，针对++，–，+=，-=，&amp;=，|=，^=是支持的，其他操作不一定支持。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; atm = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; atm &lt;&lt; <span class="built_in">endl</span>;</span><br></pre></td></tr></table></figure><p>这里只有读取atm是原子操作，但是整个这一行代码 cout &lt;&lt; atm &lt;&lt; endl; 并不是原子操作，导致最终显示在屏幕上的值是一个“曾经值”。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">std</span>::atomic&lt;<span class="keyword">int</span>&gt; atm = <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">auto</span> atm2 = atm; </span><br></pre></td></tr></table></figure><p>不可以拷贝初始化</p><p>load()：以原子方式读取atomic对象的值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">atomic&lt;<span class="keyword">int</span>&gt; <span class="title">atm2</span><span class="params">(atm.load())</span></span>;</span><br><span class="line">atm2.store(<span class="number">12</span>);</span><br></pre></td></tr></table></figure><p>原子操作实质上是：不允许在进行原子对象操作时进行CPU的上下文切换。</p><h2 id="8-chrono"><a href="#8-chrono" class="headerlink" title="8 chrono"></a>8 chrono</h2><p><a href="https://www.cnblogs.com/zlshmily/p/10058427.html">https://www.cnblogs.com/zlshmily/p/10058427.html</a></p><h3 id="8-1-std-chrono-duration"><a href="#8-1-std-chrono-duration" class="headerlink" title="8.1 std::chrono::duration"></a>8.1 std::chrono::duration</h3><p>一段时间</p><h3 id="8-2-std-chrono-time-point"><a href="#8-2-std-chrono-time-point" class="headerlink" title="8.2 std::chrono::time_point"></a>8.2 std::chrono::time_point</h3><h3 id="8-3-1-std-chrono-system-clock"><a href="#8-3-1-std-chrono-system-clock" class="headerlink" title="8.3.1 std::chrono::system_clock"></a>8.3.1 std::chrono::system_clock</h3><p>它表示当前的系统时钟，系统中运行的所有进程使用now()得到的时间是一致的。</p><h3 id="8-3-2-std-chrono-steady-clock"><a href="#8-3-2-std-chrono-steady-clock" class="headerlink" title="8.3.2 std::chrono::steady_clock"></a>8.3.2 std::chrono::steady_clock</h3><p>为了表示稳定的时间间隔，后一次调用now()得到的时间总是比前一次的值大（这句话的意思其实是，如果中途修改了系统时间，也不影响now()的结果），每次tick都保证过了稳定的时间间隔。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 介绍&lt;chrono&gt; </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">-- 一个精确中立的时间和日期库</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> * 时钟:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * std::chrono::system_clock:  依据系统的当前时间 (不稳定)</span></span><br><span class="line"><span class="comment"> * std::chrono::steady_clock:  以统一的速率运行(不能被调整)</span></span><br><span class="line"><span class="comment"> * std::chrono::high_resolution_clock: 提供最小可能的滴答周期</span></span><br><span class="line"><span class="comment"> *                   (可能是steady_clock或者system_clock的typedef)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * std:ratio&lt;&gt;表示时钟周期，即时间的计量单位</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::ratio&lt;<span class="number">1</span>,<span class="number">10</span>&gt;  r; <span class="comment">// </span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; r.num &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; r.den &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; chrono::system_clock::period::num &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; chrono::system_clock::period::den &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; chrono::steady_clock::period::num &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; chrono::steady_clock::period::den &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; chrono::high_resolution_clock::period::num &lt;&lt; <span class="string">&quot;/&quot;</span> &lt;&lt; chrono::high_resolution_clock::period::den &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * std:chrono::duration&lt;&gt;:  表示持续的时间</span></span><br><span class="line"><span class="comment"> *    duration&lt;int, ratio&lt;1,1&gt;&gt; --  秒数存储在一个int中 (默认)</span></span><br><span class="line"><span class="comment"> *    duration&lt;double, ration&lt;60,1&gt;&gt; -- 分钟数储存在一个double中</span></span><br><span class="line"><span class="comment"> *    库中定义了如下方便的duration:</span></span><br><span class="line"><span class="comment"> *    nanoseconds, microseconds, milliseconds, seconds, minutes, hours</span></span><br><span class="line"><span class="comment"> * system_clock::duration  -- duration&lt;T, system_clock::period&gt;</span></span><br><span class="line"><span class="comment"> *                                 T是一个有符号的算术类型, 可以是int或long或其他</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function">chrono::microseconds <span class="title">mi</span><span class="params">(<span class="number">2745</span>)</span></span>;</span><br><span class="line">chrono::nanoseconds na = mi;</span><br><span class="line">chrono::milliseconds mill = chrono::duration_cast&lt;chrono::milliseconds&gt;(mi);  <span class="comment">// 当可能发生信息丢失的时候，要显式地转换</span></span><br><span class="line">  <span class="comment">// 直接截断，而不是四舍五入</span></span><br><span class="line">mi = mill + mi;  <span class="comment">// 2000 + 2745 = 4745</span></span><br><span class="line">mill = chrono::duration_cast&lt;chrono::milliseconds&gt;(mill + mi);  <span class="comment">// 6</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; na.count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mill.count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mi.count() &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;min: &quot;</span> &lt;&lt; chrono::system_clock::duration::min().count() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">   <span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;max: &quot;</span> &lt;&lt; chrono::system_clock::duration::max().count() &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> <span class="comment">/* std::chrono::time_point&lt;&gt;: 表示一个时间点</span></span><br><span class="line"><span class="comment"> *       -- 自从一个指定的时间点开始的过去的时间长度: </span></span><br><span class="line"><span class="comment"> *          00:00 January 1, 1970 (Corordinated Universal Time - UTC)  -- 时钟的纪元</span></span><br><span class="line"><span class="comment"> * time_point&lt;system_clock, milliseconds&gt;:  依据system_clock, 自从纪元开始经过的毫秒数</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * typdefs</span></span><br><span class="line"><span class="comment">  system_clock::time_point  -- time_point&lt;system_clock, system_clock::duration&gt;</span></span><br><span class="line"><span class="comment">  steady_clock::time_point  -- time_point&lt;steady_clock, steady_clock::duration&gt;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">// 使用系统时间</span></span><br><span class="line">chrono::system_clock::time_point tp = chrono::system_clock::now();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tp.time_since_epoch().count() &lt;&lt; <span class="built_in">endl</span>;  </span><br><span class="line">tp = tp + seconds(<span class="number">2</span>);  <span class="comment">// 因为tp精度高，不需要转换</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; tp.time_since_epoch().count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算时间间隔最好用steady_clock</span></span><br><span class="line">chrono::steady_clock::time_point start = chrono::steady_clock::now();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;I am bored&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">chrono::steady_clock::time_point end = chrono::steady_clock::now();</span><br><span class="line">chrono::steady_clock::duration d = end - start;</span><br><span class="line"><span class="keyword">if</span> (d == chrono::steady_clock::duration::zero())    <span class="comment">//0时间长度的表示</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">&quot;no time elapsed&quot;</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; duration_cast&lt;microseconds&gt;(d).count() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">   <span class="comment">// 使用system_clock可能得到不正确的值</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;多线程编程&quot;&gt;&lt;a href=&quot;#多线程编程&quot; class=&quot;headerlink&quot; title=&quot;多线程编程&quot;&gt;&lt;/a&gt;多线程编程&lt;/h1&gt;&lt;h2 id=&quot;1-线程的启动、结束&quot;&gt;&lt;a href=&quot;#1-线程的启动、结束&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="计算机基础知识" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
    <category term="c++" scheme="http://yoursite.com/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/c/"/>
    
    
    <category term="c++" scheme="http://yoursite.com/tags/c/"/>
    
    <category term="多线程" scheme="http://yoursite.com/tags/%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>buttfly主题</title>
    <link href="http://yoursite.com/2020/10/29/butterfly%E4%B8%BB%E9%A2%98/"/>
    <id>http://yoursite.com/2020/10/29/butterfly%E4%B8%BB%E9%A2%98/</id>
    <published>2020-10-29T08:06:54.000Z</published>
    <updated>2021-01-02T04:35:05.585Z</updated>
    
    <content type="html"><![CDATA[<p>官方网站</p><p><a href="https://butterfly.js.org/">https://butterfly.js.org/</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asdf</span><br></pre></td></tr></table></figure><p>$S_a$</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;官方网站&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://butterfly.js.org/&quot;&gt;https://butterfly.js.org/&lt;/a&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;g</summary>
      
    
    
    
    <category term="语法" scheme="http://yoursite.com/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2020/03/05/hello-world/"/>
    <id>http://yoursite.com/2020/03/05/hello-world/</id>
    <published>2020-03-05T03:15:45.000Z</published>
    <updated>2021-01-02T04:35:05.585Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.io/docs/&quot;&gt;documentation&lt;/a&gt; for</summary>
      
    
    
    
    <category term="语法" scheme="http://yoursite.com/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>markdown syntax</title>
    <link href="http://yoursite.com/2020/03/03/markdown-syntax/"/>
    <id>http://yoursite.com/2020/03/03/markdown-syntax/</id>
    <published>2020-03-03T12:17:35.000Z</published>
    <updated>2021-01-02T04:35:05.585Z</updated>
    
    <content type="html"><![CDATA[<p>$A$</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">n1, n2</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> a1 = n1.split(<span class="string">&#x27;&#x27;</span>).reverse();</span><br><span class="line">  <span class="keyword">const</span> a2 = n2.split(<span class="string">&#x27;&#x27;</span>).reverse();</span><br><span class="line">  <span class="keyword">const</span> result = [];</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>, l = <span class="built_in">Math</span>.max(a1.length, a2.length); i &lt; l; i++) &#123;</span><br><span class="line">    result[i] = (result[i] || <span class="number">0</span>) + <span class="built_in">parseInt</span>(a1[i] || <span class="number">0</span>) + <span class="built_in">parseInt</span>(a2[i] || <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">while</span> (result[i] &gt;= <span class="number">10</span>) &#123;</span><br><span class="line">      result[i] -= <span class="number">10</span>;</span><br><span class="line">      result[i + <span class="number">1</span>] = (result[i + <span class="number">1</span>] || <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result.reverse().join(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p><strong>加粗</strong><br><em>倾斜</em><br><strong><em>加粗倾斜</em></strong><br><del>加删除线</del></p><blockquote><p>引用的内容（可以嵌套）</p></blockquote><h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><hr><p><img src="http://file.koolearn.com/20161207/14810957953513.png" alt="图片 alt" title="网上随便找的"></p><p><a href="超链接地址" title="超链接title">超链接名</a></p><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ul><li>列表内容</li></ul><ol><li>列表内容</li><li>列表内容</li><li>列表内容</li></ol><table><thead><tr><th>表头</th><th align="center">表头</th><th align="right">表头</th></tr></thead><tbody><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr><tr><td>内容</td><td align="center">内容</td><td align="right">内容</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">第二行分割表头和内容</span><br><span class="line">-有一个就行</span><br><span class="line">文字默认居左</span><br><span class="line">--两边加:表示文字居中</span><br><span class="line">--右边加:表示文字居右</span><br><span class="line">原生的语法两边都要用|包起来，此处原作者省略。</span><br></pre></td></tr></table></figure><p>单行代码:代码之间分别用一个反引号包起来<br><code>代码内容</code></p><p>代码块:代码之间分别用三个反引号包起来，且两边的反引号独占一行</p> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始 </span><br><span class="line">op&#x3D;&gt;operation: My Operation </span><br><span class="line">cond&#x3D;&gt;condition: Yes or No? </span><br><span class="line">e&#x3D;&gt;end: 结束 </span><br><span class="line"></span><br><span class="line">st-&gt;op-&gt;cond </span><br><span class="line">cond(yes)-&gt;e </span><br><span class="line">cond(no)-&gt;op </span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">st&#x3D;&gt;start: 开始框</span><br><span class="line">op&#x3D;&gt;operation: 处理框</span><br><span class="line">cond&#x3D;&gt;condition: 判断框(是或否?)</span><br><span class="line">sub1&#x3D;&gt;subroutine: 子流程</span><br><span class="line">io&#x3D;&gt;inputoutput: 输入输出框</span><br><span class="line">e&#x3D;&gt;end: 结束框</span><br><span class="line">st-&gt;op-&gt;cond</span><br><span class="line">cond(yes)-&gt;io-&gt;e</span><br><span class="line">cond(no)-&gt;sub1(right)-&gt;op</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;$A$&lt;/p&gt;
&lt;figure class=&quot;highlight js&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;sp</summary>
      
    
    
    
    <category term="语法" scheme="http://yoursite.com/categories/%E8%AF%AD%E6%B3%95/"/>
    
    
  </entry>
  
</feed>
